// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjektGrupowy.Infrastructure.Data;

#nullable disable

namespace ProjektGrupowy.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<int>("LabeledProjectsId")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectLabelersId")
                        .HasColumnType("text");

                    b.HasKey("LabeledProjectsId", "ProjectLabelersId");

                    b.HasIndex("ProjectLabelersId");

                    b.ToTable("ProjectLabelers", (string)null);
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.AssignedLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DelDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("End")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("InsDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LabelId")
                        .HasColumnType("integer");

                    b.Property<string>("Start")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VideoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LabelId");

                    b.HasIndex("VideoId");

                    b.ToTable("AssignedLabels", (string)null);
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.GeneratedReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DelDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.HasIndex("ProjectId");

                    b.ToTable("GeneratedReports", (string)null);
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.Label", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorHex")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DelDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<char?>("Shortcut")
                        .HasColumnType("character(1)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SubjectId");

                    b.ToTable("Labels", (string)null);
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DelDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ModificationDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.ProjectAccessCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DelDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiresAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_ProjectAccessCode_Code");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectAccessCodes", (string)null);
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DelDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("Subjects", (string)null);
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.SubjectVideoGroupAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DelDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("ModificationDate")
                        .HasColumnType("date");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("VideoGroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SubjectId");

                    b.HasIndex("VideoGroupId");

                    b.ToTable("SubjectVideoGroupAssignments", (string)null);
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<long>("CreatedTimestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("created_timestamp");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("user_entity", (string)null);

                    b.ToView("user_entity", (string)null);
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DelDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("PositionInQueue")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("VideoGroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("VideoGroupId", "PositionInQueue");

                    b.ToTable("Videos", (string)null);
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.VideoGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DelDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("VideoGroups", (string)null);
                });

            modelBuilder.Entity("SubjectVideoGroupAssignmentUser", b =>
                {
                    b.Property<int>("LabeledAssignmentsId")
                        .HasColumnType("integer");

                    b.Property<string>("LabelersId")
                        .HasColumnType("text");

                    b.HasKey("LabeledAssignmentsId", "LabelersId");

                    b.HasIndex("LabelersId");

                    b.ToTable("LabelersAssignments", (string)null);
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("ProjektGrupowy.Domain.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("LabeledProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektGrupowy.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ProjectLabelersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.AssignedLabel", b =>
                {
                    b.HasOne("ProjektGrupowy.Domain.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektGrupowy.Domain.Models.Label", "Label")
                        .WithMany("AssignedLabels")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektGrupowy.Domain.Models.Video", "Video")
                        .WithMany("AssignedLabels")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Label");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.GeneratedReport", b =>
                {
                    b.HasOne("ProjektGrupowy.Domain.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektGrupowy.Domain.Models.Project", "Project")
                        .WithMany("GeneratedReports")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.Label", b =>
                {
                    b.HasOne("ProjektGrupowy.Domain.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektGrupowy.Domain.Models.Subject", "Subject")
                        .WithMany("Labels")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.Project", b =>
                {
                    b.HasOne("ProjektGrupowy.Domain.Models.User", "CreatedBy")
                        .WithMany("OwnedProjects")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.ProjectAccessCode", b =>
                {
                    b.HasOne("ProjektGrupowy.Domain.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektGrupowy.Domain.Models.Project", "Project")
                        .WithMany("AccessCodes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.Subject", b =>
                {
                    b.HasOne("ProjektGrupowy.Domain.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektGrupowy.Domain.Models.Project", "Project")
                        .WithMany("Subjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.SubjectVideoGroupAssignment", b =>
                {
                    b.HasOne("ProjektGrupowy.Domain.Models.User", "CreatedBy")
                        .WithMany("OwnedAssignments")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjektGrupowy.Domain.Models.Subject", "Subject")
                        .WithMany("SubjectVideoGroupAssignments")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektGrupowy.Domain.Models.VideoGroup", "VideoGroup")
                        .WithMany("SubjectVideoGroupAssignments")
                        .HasForeignKey("VideoGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Subject");

                    b.Navigation("VideoGroup");
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.Video", b =>
                {
                    b.HasOne("ProjektGrupowy.Domain.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektGrupowy.Domain.Models.VideoGroup", "VideoGroup")
                        .WithMany("Videos")
                        .HasForeignKey("VideoGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("VideoGroup");
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.VideoGroup", b =>
                {
                    b.HasOne("ProjektGrupowy.Domain.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektGrupowy.Domain.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SubjectVideoGroupAssignmentUser", b =>
                {
                    b.HasOne("ProjektGrupowy.Domain.Models.SubjectVideoGroupAssignment", null)
                        .WithMany()
                        .HasForeignKey("LabeledAssignmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjektGrupowy.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("LabelersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.Label", b =>
                {
                    b.Navigation("AssignedLabels");
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.Project", b =>
                {
                    b.Navigation("AccessCodes");

                    b.Navigation("GeneratedReports");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.Subject", b =>
                {
                    b.Navigation("Labels");

                    b.Navigation("SubjectVideoGroupAssignments");
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.User", b =>
                {
                    b.Navigation("OwnedAssignments");

                    b.Navigation("OwnedProjects");
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.Video", b =>
                {
                    b.Navigation("AssignedLabels");
                });

            modelBuilder.Entity("ProjektGrupowy.Domain.Models.VideoGroup", b =>
                {
                    b.Navigation("SubjectVideoGroupAssignments");

                    b.Navigation("Videos");
                });
#pragma warning restore 612, 618
        }
    }
}
